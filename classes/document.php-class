<?php
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

class ExtendedDocument extends DOMDocument {
  // ExtendedDocument PHP class
  // this extends the general PHP DOM Document class to simplify some usual constructs
  //
  // function __construct([$version], [$encoding])
  //   CONSTRUCTOR
  //   construct a new DOM Document that uses our element definitions
  //
  // static function initHTML5([$doc])
  //   initialize as an HTML5 document and return references to its basic elements.
  //     If a $doc is handed over (an ExtendedDocument or a derived class), load the content into that document.
  //     returns an associative array with the following elements: 'html', 'head', 'title', 'body'
  //
  // public function appendElement($name, [$value])
  //   appends a DOMDocument::createElement() as a child of this document (see there for params)
  //     returns the new child
  //
  // public function appendElementXML($name, $xmldata)
  //   appends a DOMDocument::createElement() with the given name as a child of this document,
  //   with an ExtendedDocument::createXMLFragment() of the given XML data inside
  //     returns the new child
  //
  // public function appendLink($target, [$value])
  //   appends an ExtendedDocument::createElementLink() as a child of this document (see there for params)
  //     returns the new child
  //
  // public function appendImage($src, [$alt_text])
  //   appends an ExtendedDocument::createElementImage() as a child of this document (see there for params)
  //     returns the new child
  //
  // public function appendForm($action, $method, $name, [$id])
  //   appends an ExtendedDocument::createElementForm() as a child of this document (see there for params)
  //     returns the new child
  //
  // public function appendFormDiv($action, $method, $name, [$id])
  //   appends an ExtendedDocument::createElementForm() as a child of this document (see there for params)
  //     returns an HTML <div> that is a child of the new child
  //
  // public function appendInputHidden($name, $value)
  //   appends an ExtendedDocument::createElementInputHidden() as a child of this document (see there for params)
  //     returns the new child
  //
  // public function appendInputText($name, $maxlength, $size, [$id], [$value])
  //   appends an ExtendedDocument::createElementInputText() as a child of this document (see there for params)
  //     returns the new child
  //
  // public function appendInputNumber($name, $maxlength, $size, [$id], [$value])
  //   appends an ExtendedDocument::createElementInputNumber() as a child of this document (see there for params)
  //     returns the new child
  //
  // public function appendInputEmail($name, $maxlength, $size, [$id], [$value])
  //   appends an ExtendedDocument::createElementInputEmail() as a child of this document (see there for params)
  //     returns the new child
  //
  // public function appendInputPassword($name, $maxlength, $size, [$id], [$value])
  //   appends an ExtendedDocument::createElementInputPassword() as a child of this document (see there for params)
  //     returns the new child
  //
  // public function appendInputRadio($name, $id, $value, $checked)
  //   appends an ExtendedDocument::createElementInputRadio() as a child of this document (see there for params)
  //     returns the new child
  //
  // public function appendInputCheckbox($name, $id, $value, $checked)
  //   appends an ExtendedDocument::createElementInputCheckbox() as a child of this document (see there for params)
  //     returns the new child
  //
  // public function appendInputFile($name, $id, $accept)
  //   appends an ExtendedDocument::createElementInputFile() as a child of this document (see there for params)
  //     returns the new child
  //
  // public function appendInputSubmit($value)
  //   appends an ExtendedDocument::createElementInputSubmit() as a child of this document (see there for params)
  //     returns the new child
  //
  // public function appendButton($value, $onclick = null)
  //   appends an ExtendedDocument::createElementButton() as a child of this document (see there for params)
  //     returns the new child
  //
  // public function appendTextArea($name, $columns, $rows, [$id], [$value])
  //   appends an ExtendedDocument::createElementTextArea() as a child of this document (see there for params)
  //     returns the new child
  //
  // public function appendElementSelect($name, [$id], [$options], [$default])
  //   appends an ExtendedDocument::createElementSelect() as a child of this document (see there for params)
  //     returns the new child
  //
  // public function appendElementOption($key, $desc, [$selected])
  //   appends an ExtendedDocument::createElementOption() as a child of this document (see there for params)
  //     returns the new child
  //
  // public function appendLabel($for_id, $value)
  //   appends an ExtendedDocument::createElementLabel() as a child of this document (see there for params)
  //     returns the new child
  //
  // public function appendText($text)
  //   appends a DOMDocument::createTextNode() as a child of this document (see there for params)
  //     returns the new child
  //
  // public function appendEntity($name)
  //   appends a DOMDocument::createEntityReference() as a child of this document (see there for params)
  //     returns the new child
  //
  // public function appendComment($comment_data)
  //   appends a DOMDocument::createComment() as a child of this document (see there for params)
  //     returns the new child
  //
  // public function appendHTMLMarkup($htmldata, [$parentNode])
  //   appends a representation of the HTML data as children of the given parent node, by default this document
  //     NO return value!
  //
  // public function appendXMLMarkup($xmldata, [$parentNode])
  //   appends a representation of the XML data as children of the given parent node, by default this document
  //     NO return value!
  //
  // public function appendJSElement($jsdata)
  //   appends an ExtendedDocument::createElementJS() as a child of this document (see there for params)
  //     NO return value!
  //
  // public function appendJSFile($jsURL, [$defer], [$async])
  //   appends an ExtendedDocument::createElementJSFile() as a child of this document (see there for params)
  //     returns the new child
  //
  // public function createElementLink($target, [$value])
  //   returns an ExtendedElement that is an HTML <a> with the given target (href) and (optional) value
  //
  // public function createElementImage($src, [$alt_text])
  //   returns an ExtendedElement that is an HTML <img> with the given (src) and alt attributes (set to '' by default)
  //
  // public function createElementForm($action, $method, $name)
  //   returns an ExtendedElement that is an HTML <div> that is a child of an HTML <form>
  //   with the given action, method, and name
  //
  // public function createElementInputHidden($name, $value)
  //   returns an ExtendedElement that is an HTML <input> of type 'hidden' with the given name and value
  //
  // public function createElementInputText($name, $maxlength, $size, [$id], [$value])
  //   returns an ExtendedElement that is an HTML <input> of type 'text' with the given name, maxlength, size,
  //   and optionally id and value
  //
  // public function createElementInputNumber($name, $maxlength, $size, [$id], [$value])
  //   returns an ExtendedElement that is an HTML <input> of type 'number' with the given name, maxlength, size,
  //   and optionally id and value
  //
  // public function createElementInputEmail($name, $maxlength, $size, [$id], [$value])
  //   returns an ExtendedElement that is an HTML <input> of type 'email' with the given name, maxlength, size,
  //   and optionally id and value
  //
  // public function createElementInputPassword($name, $maxlength, $size, [$id], [$value])
  //   returns an ExtendedElement that is an HTML <input> of type 'password' with the given name, maxlength, size,
  //   and optionally id and value
  //
  // public function createElementInputRadio($name, $id, $value, $checked)
  //   returns an ExtendedElement that is an HTML <input> of type 'radio' with the given name, id, value and
  //   checked state
  //
  // public function createElementInputCheckbox($name, $id, $value, $checked)
  //   returns an ExtendedElement that is an HTML <input> of type 'checkbox' with the given name, id, value and
  //   checked state
  //
  // public function createElementInputFile($name, $id, $accept)
  //   returns an ExtendedElement that is an HTML <input> of type 'file' with the given name, id and accept
  //
  // public function createElementInputSubmit($value)
  //   returns an ExtendedElement that is an HTML <input> of type 'submit' with the given value as label
  //
  // public function createElementButton($value, $onclick = null)
  //   returns an ExtendedElement that is an HTML button with the given value as label and optionally onclick attribute
  //
  // public function createElementTextArea($name, $columns, $rows, [$id], [$value])
  //   returns an ExtendedElement that is an HTML <textarea> with the given name, columns, rows,
  //   and optionally id and value
  //
  // public function createElementSelect($name, [$id], [$options], [$default])
  //   returns an ExtendedElement that is an HTML <select> with the given name, and optionally id,
  //   array of options (key => description) and key of the by-default selected entry
  //
  // public function createElementOption($key, $desc, [$selected])
  //   returns an ExtendedElement that is an HTML <option> with the given key (value) and description (content)
  //   and optionally bool that tells if the entry is selected
  //
  // public function createElementLabel($for_id, $value)
  //   returns an ExtendedElement that is an HTML <label> with the given 'for' and value
  //
  // public function createElementJS($jsdata)
  //   returns an ExtendedElement that is an HTML <script> of JavaScript type with the JS data inside
  //
  // public function createElementJSFile($jsURL, [$defer], [$async])
  //   returns an ExtendedElement that is an HTML <script> of JavaScript type linking to the file given by the URL
  //     $defer and $async are boolean attributes that set if the script should be executed after parsing but before onload, and if it should be loaded asynchronously.

  function __construct($version = '1.0', $encoding = 'utf-8') {
    // make sure the default DOMDocument constructor runs
    parent::__construct($version, $encoding);
    $this->registerNodeClass('DOMElement', 'ExtendedElement');
    $this->registerNodeClass('DOMDocumentFragment', 'ExtendedDocumentFragment');
  }

  static function initHTML5($doc = null) {
    if (is_null($doc)) { $doc = new ExtendedDocument(); }
    $doc->loadHTML('<!DOCTYPE html><html></html>'); // this seems to be the only way to get the DOCTYPE set properly.

    // Created basic HTML document structure.
    $root = $doc->getElementsByTagName('html')->item(0);
    $head = $root->appendElement('head');
    $title = $head->appendElement('title');
    $body = $root->appendElement('body');

    return array('document' => $doc,
                 'html' => $root,
                 'head' => $head,
                 'title' => $title,
                 'body' => $body);
  }

  public function appendElement($name, $value = '') {
    return $this->appendChild($this->createElement($name, $value));
  }
  public function appendElementXML($name, $xmldata) {
    $aelem = $this->appendChild($this->createElement($name));
    $aelem->appendXMLMarkup($xmldata);
    //$aelem->appendChild($this->createXMLFragment($xmldata));
    return $aelem;
  }
  public function appendLink($target, $value = '') {
    return $this->appendChild($this->createElementLink($target, $value));
  }
  public function appendImage($src, $alt_text = '') {
    return $this->appendChild($this->createElementImage($src, $alt_text));
  }
  public function appendForm($action, $method, $name, $id = null) {
    return $this->appendChild($this->createElementForm($action, $method, $name, $id));
  }
  public function appendFormDiv($action, $method, $name, $id = null) {
    $formelem = $this->appendChild($this->createElementForm($action, $method, $name, $id));
    return $formelem->appendElement('div');
  }
  public function appendInputHidden($name, $value) {
    return $this->appendChild($this->createElementInputHidden($name, $value));
  }
  public function appendInputText($name, $maxlength, $size, $id = null, $value = null) {
    return $this->appendChild($this->createElementInputText($name, $maxlength, $size, $id, $value));
  }
  public function appendInputNumber($name, $maxlength, $size, $id = null, $value = null) {
    return $this->appendChild($this->createElementInputNumber($name, $maxlength, $size, $id, $value));
  }
  public function appendInputEmail($name, $maxlength, $size, $id = null, $value = null) {
    return $this->appendChild($this->createElementInputEmail($name, $maxlength, $size, $id, $value));
  }
  public function appendInputPassword($name, $maxlength, $size, $id = null, $value = null) {
    return $this->appendChild($this->createElementInputPassword($name, $maxlength, $size, $id, $value));
  }
  public function appendInputRadio($name, $id, $value, $checked) {
    return $this->appendChild($this->createElementInputRadio($name, $id, $value, $checked));
  }
  public function appendInputCheckbox($name, $id, $value, $checked) {
    return $this->appendChild($this->createElementInputCheckbox($name, $id, $value, $checked));
  }
  public function appendInputFile($name, $id, $accept) {
    return $this->appendChild($this->createElementInputFile($name, $id, $accept));
  }
  public function appendInputSubmit($value) {
    return $this->appendChild($this->createElementInputSubmit($value));
  }
  public function appendButton($value, $onclick = null) {
    return $this->appendChild($this->createElementButton($value, $onclick));
  }
  public function appendTextArea($name, $columns, $rows, $id = null, $value = null) {
    return $this->appendChild($this->createElementTextArea($name, $columns, $rows, $id, $value));
  }
  public function appendElementSelect($name, $id = null, $options = array(), $default = null) {
    return $this->appendChild($this->createElementSelect($name, $id, $options, $default));
  }
  public function appendElementOption($key, $desc, $selected = false) {
    return $this->appendChild($this->createElementOption($key, $desc, $selected));
  }
  public function appendLabel($for_id, $value) {
    return $this->appendChild($this->createElementLabel($for_id, $value));
  }
  public function appendText($text) {
    return $this->appendChild($this->createTextNode($text));
  }
  public function appendEntity($name) {
    return $this->appendChild($this->createEntityReference($name));
  }
  public function appendComment($comment_data) {
    return $this->appendChild($this->createComment($comment_data));
  }
  public function appendJSElement($jsdata) {
    $this->appendChild($this->createElementJS($jsdata));
  }
  public function appendJSFile($jsdata, $defer = false, $async = false) {
    return $this->appendChild($this->createElementJSFile($jsdata, $defer, $async));
  }

  public function appendHTMLMarkup($htmldata, $parentNode = null) {
    if (is_null($parentNode)) { $parentNode =& $this; }
    // XXX: just a workaround for now!
    $parentNode->appendChild($this->createCDATASection($htmldata));
  }

  public function appendXMLMarkup($xmldata, $parentNode = null) {
    if (is_null($parentNode)) { $parentNode =& $this; }
    $tmpdoc = new ExtendedDocument;
    $tmpxml = '<?xml version="1.0" encoding="utf-8"?>'."\n";
    $tmpxml .= '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">'."\n";
    $tmpxml .= '<root>'.$xmldata.'</root>';
    $tmpdoc->loadXML($tmpxml);
    foreach ($tmpdoc->getElementsByTagName('root')->item(0)->childNodes as $child) {
      $parentNode->appendChild($this->importNode($child, true));
    }
  }

  public function createElement($name, $value = '') {
    // Adding the $value in DOMDocument's createElement does NOT escape it, so override it and use appendText to support that.
    $aelem = parent::createElement($name);
    $aelem->appendText($value);
    return $aelem;
  }

  public function createElementLink($target, $value = '') {
    $link = $this->createElement('a', $value);
    $link->setAttribute('href', $target); // XXX: take care of & etc. in links
    return $link;
  }

  public function createElementImage($src, $alt_text = '') {
    $img = $this->createElement('img');
    $img->setAttribute('src', $src);
    $img->setAttribute('alt', $alt_text);
    return $img;
  }

  public function createElementForm($action, $method, $name, $id = null) {
    $formelem = $this->createElement('form');
    $formelem->setAttribute('action', $action);
    $formelem->setAttribute('method', $method);
    $formelem->setAttribute('name', $name);
    $formelem->setAttribute('id', $id);
    return $formelem;
  }

  public function createElementInputHidden($name, $value) {
    $hidden = $this->createElement('input');
    $hidden->setAttribute('type', 'hidden');
    $hidden->setAttribute('name', $name);
    $hidden->setAttribute('value', $value);
    return $hidden;
  }

  public function createElementInputText($name, $maxlength, $size, $id = null, $value = null) {
    $txfield = $this->createElement('input');
    $txfield->setAttribute('type', 'text');
    if (!is_null($id)) { $txfield->setAttribute('id', $id); }
    $txfield->setAttribute('name', $name);
    $txfield->setAttribute('maxlength', $maxlength);
    $txfield->setAttribute('size', $size);
    if (!is_null($value)) { $txfield->setAttribute('value', $value); }
    return $txfield;
  }

  public function createElementInputNumber($name, $maxlength, $size, $id = null, $value = null) {
    $txfield = $this->createElement('input');
    $txfield->setAttribute('type', 'number');
    if (!is_null($id)) { $txfield->setAttribute('id', $id); }
    $txfield->setAttribute('name', $name);
    $txfield->setAttribute('maxlength', $maxlength);
    $txfield->setAttribute('size', $size);
    if (!is_null($value)) { $txfield->setAttribute('value', $value); }
    return $txfield;
  }

  public function createElementInputEmail($name, $maxlength, $size, $id = null, $value = null) {
    $txfield = $this->createElement('input');
    $txfield->setAttribute('type', 'email');
    if (!is_null($id)) { $txfield->setAttribute('id', $id); }
    $txfield->setAttribute('name', $name);
    $txfield->setAttribute('maxlength', $maxlength);
    $txfield->setAttribute('size', $size);
    if (!is_null($value)) { $txfield->setAttribute('value', $value); }
    return $txfield;
  }

  public function createElementInputPassword($name, $maxlength, $size, $id = null, $value = null) {
    $pwfield = $this->createElement('input');
    $pwfield->setAttribute('type', 'password');
    if (!is_null($id)) { $pwfield->setAttribute('id', $id); }
    $pwfield->setAttribute('name', $name);
    $pwfield->setAttribute('maxlength', $maxlength);
    $pwfield->setAttribute('size', $size);
    if (!is_null($value)) { $pwfield->setAttribute('value', $value); }
    return $pwfield;
  }

  public function createElementInputRadio($name, $id, $value, $checked) {
    $radio = $this->createElement('input');
    $radio->setAttribute('type', 'radio');
    $radio->setAttribute('name', $name);
    if (!is_null($id)) { $radio->setAttribute('id', $id); }
    $radio->setAttribute('value', $value);
    if ($checked) { $radio->setAttribute('checked', ''); }
    return $radio;
  }

  public function createElementInputCheckbox($name, $id, $value, $checked) {
    $cbox = $this->createElement('input');
    $cbox->setAttribute('type', 'checkbox');
    $cbox->setAttribute('name', $name);
    if (!is_null($id)) { $cbox->setAttribute('id', $id); }
    $cbox->setAttribute('value', $value);
    if ($checked) { $cbox->setAttribute('checked', ''); }
    return $cbox;
  }

  public function createElementInputFile($name, $id, $accept) {
    $fileinput = $this->createElement('input');
    $fileinput->setAttribute('type', 'file');
    $fileinput->setAttribute('name', $name);
    if (!is_null($id)) { $fileinput->setAttribute('id', $id); }
    $fileinput->setAttribute('accept', $accept);
    return $fileinput;
  }

  public function createElementInputSubmit($value) {
    $submitbtn = $this->createElement('input');
    $submitbtn->setAttribute('type', 'submit');
    $submitbtn->setAttribute('value', $value);
    return $submitbtn;
  }

  public function createElementButton($value, $onclick = null) {
    $btn = $this->createElement('input');
    $btn->setAttribute('type', 'button');
    $btn->setAttribute('value', $value);
    if (!is_null($onclick)) { $btn->setAttribute('onclick', $onclick); }
    return $btn;
  }

  public function createElementTextArea($name, $columns, $rows, $id = null, $value = null) {
    $txtarea = $this->createElement('textarea', $value);
    $txtarea->setAttribute('name', $name);
    $txtarea->setAttribute('cols', $columns);
    $txtarea->setAttribute('rows', $rows);
    if (!is_null($id)) { $txtarea->setAttribute('id', $id); }
    return $txtarea;
  }

  public function createElementSelect($name, $id = null, $options = array(), $default = null) {
    $select = $this->createElement('select');
    $select->setAttribute('name', $name);
    if (!is_null($id)) { $select->setAttribute('id', $id); }
    foreach ($options as $key => $desc) {
      $select->appendElementOption($key, $desc, ($key == $default));
    }
    return $select;
  }

  public function createElementOption($key, $desc, $selected = false) {
    $option = $this->createElement('option', $desc);
    $option->setAttribute('value', $key);
    if ($selected) { $option->setAttribute('selected', ''); }
    return $option;
  }

  public function createElementLabel($for_id, $value) {
    $label = $this->createElement('label', $value);
    $label->setAttribute('for', $for_id);
    return $label;
  }

  public function createElementJS($jsdata) {
    $jselem = $this->createElement('script');
    // Note: type can/should be left out for HTML5.
    $jselem->setAttribute('type', 'text/javascript');
    $jselem->appendChild($this->createCDATASection($jsdata));
    return $jselem;
  }

  public function createElementJSFile($jsURL, $defer = false, $async = false) {
    $jselem = $this->createElement('script');
    // Note: type can/should be left out for HTML5.
    $jselem->setAttribute('type', 'text/javascript');
    if ($defer) {
      $jselem->setAttribute('defer', '');
    }
    if ($async) {
      $jselem->setAttribute('async', '');
    }
    $jselem->setAttribute('src', $jsURL);
    return $jselem;
  }
}

class ExtendedElement extends DOMElement {
  // ExtendedElement PHP class
  // this extends the general PHP DOM Element class to simplify some usual constructs
  //
  // public function appendElement($name, [$value])
  //   appends a DOMDocument::createElement() as a child of this element (see there for params)
  //     returns the new child
  //
  // public function appendElementXML($name, $xmldata)
  //   appends a DOMDocument::createElement() with the given name as a child of this element,
  //   with an ExtendedDocument::createXMLFragment() of the given XML data inside
  //     returns the new child
  //
  // public function appendLink($target, [$value])
  //   appends an ExtendedDocument::createElementLink() as a child of this element (see there for params)
  //     returns the new child
  //
  // public function appendImage($src, [$alt_text])
  //   appends an ExtendedDocument::createElementImage() as a child of this document (see there for params)
  //     returns the new child
  //
  // public function appendForm($action, $method, $name, [$id])
  //   appends an ExtendedDocument::createElementForm() as a child of this element (see there for params)
  //     returns the new child
  //
  // public function appendFormDiv($action, $method, $name, [$id])
  //   appends an ExtendedDocument::createElementForm() as a child of this element (see there for params)
  //     returns an HTML <div> that is a child of the new child
  //
  // public function appendInputHidden($name, $value)
  //   appends an ExtendedDocument::createElementInputHidden() as a child of this element (see there for params)
  //     returns the new child
  //
  // public function appendInputText($name, $maxlength, $size, [$id], [$value])
  //   appends an ExtendedDocument::createElementInputText() as a child of this element (see there for params)
  //     returns the new child
  //
  // public function appendInputNumber($name, $maxlength, $size, [$id], [$value])
  //   appends an ExtendedDocument::createElementInputNumber() as a child of this element (see there for params)
  //     returns the new child
  //
  // public function appendInputEmail($name, $maxlength, $size, [$id], [$value])
  //   appends an ExtendedDocument::createElementInputEmail() as a child of this element (see there for params)
  //     returns the new child
  //
  // public function appendInputPassword($name, $maxlength, $size, [$id], [$value])
  //   appends an ExtendedDocument::createElementInputPassword() as a child of this element (see there for params)
  //     returns the new child
  //
  // public function appendInputRadio($name, $id, $value, $checked)
  //   appends an ExtendedDocument::createElementInputRadio() as a child of this element (see there for params)
  //     returns the new child
  //
  // public function appendInputCheckbox($name, $id, $value, $checked)
  //   appends an ExtendedDocument::createElementInputCheckbox() as a child of this element (see there for params)
  //     returns the new child
  //
  // public function appendInputFile($name, $id, $accept)
  //   appends an ExtendedDocument::createElementInputFile() as a child of this element (see there for params)
  //     returns the new child
  //
  // public function appendInputSubmit($value)
  //   appends an ExtendedDocument::createElementInputSubmit() as a child of this element (see there for params)
  //     returns the new child
  //
  // public function appendButton($value, $onclick = null)
  //   appends an ExtendedDocument::createElementButton() as a child of this element (see there for params)
  //     returns the new child
  //
  // public function appendTextArea($name, $columns, $rows, [$id], [$value])
  //   appends an ExtendedDocument::createElementTextArea() as a child of this element (see there for params)
  //     returns the new child
  //
  // public function appendElementSelect($name, [$id], [$options], [$default])
  //   appends an ExtendedDocument::createElementSelect() as a child of this element (see there for params)
  //     returns the new child
  //
  // public function appendElementOption($key, $desc, [$selected])
  //   appends an ExtendedDocument::createElementOption() as a child of this element (see there for params)
  //     returns the new child
  //
  // public function appendLabel($for_id, $value)
  //   appends an ExtendedDocument::createElementLabel() as a child of this element (see there for params)
  //     returns the new child
  //
  // public function appendText($text)
  //   appends a DOMDocument::createTextNode() as a child of this element (see there for params)
  //     returns the new child
  //
  // public function appendEntity($name)
  //   appends a DOMDocument::createEntityReference() as a child of this element (see there for params)
  //     returns the new child
  //
  // public function appendComment($comment_data)
  //   appends a DOMDocument::createComment() as a child of this element (see there for params)
  //     returns the new child
  //
  // public function appendHTMLMarkup($htmldata)
  //   appends a representation of the HTML data as children of this element
  //     NO return value!
  //
  // public function appendXMLMarkup($xmldata)
  //   appends a representation of the XML data as children of this element
  //     NO return value!
  //
  // public function appendJSElement($jsdata)
  //   appends an ExtendedDocument::createElementJS() as a child of this element (see there for params)
  //     NO return value!
  //
  // public function appendJSFile($jsURL, [$defer], [$async])
  //   appends an ExtendedDocument::createElementJSFile() as a child of this element (see there for params)
  //     returns the new child

  public function appendElement($name, $value = '') {
    return $this->appendChild($this->ownerDocument->createElement($name, $value));
  }
  public function appendElementXML($name, $xmldata) {
    $aelem = $this->appendChild($this->ownerDocument->createElement($name));
    $aelem->appendXMLMarkup($xmldata);
    return $aelem;
  }
  public function appendLink($target, $value = '') {
    return $this->appendChild($this->ownerDocument->createElementLink($target, $value));
  }
  public function appendImage($src, $alt_text = '') {
    return $this->appendChild($this->ownerDocument->createElementImage($src, $alt_text));
  }
  public function appendForm($action, $method, $name, $id = null) {
    return $this->appendChild($this->ownerDocument->createElementForm($action, $method, $name, $id));
  }
  public function appendFormDiv($action, $method, $name, $id = null) {
    $formelem = $this->appendChild($this->ownerDocument->createElementForm($action, $method, $name, $id));
    return $formelem->appendElement('div');
  }
  public function appendInputHidden($name, $value) {
    return $this->appendChild($this->ownerDocument->createElementInputHidden($name, $value));
  }
  public function appendInputText($name, $maxlength, $size, $id = null, $value = null) {
    return $this->appendChild($this->ownerDocument->createElementInputText($name, $maxlength, $size, $id, $value));
  }
  public function appendInputNumber($name, $maxlength, $size, $id = null, $value = null) {
    return $this->appendChild($this->ownerDocument->createElementInputNumber($name, $maxlength, $size, $id, $value));
  }
  public function appendInputEmail($name, $maxlength, $size, $id = null, $value = null) {
    return $this->appendChild($this->ownerDocument->createElementInputEmail($name, $maxlength, $size, $id, $value));
  }
  public function appendInputPassword($name, $maxlength, $size, $id = null, $value = null) {
    return $this->appendChild($this->ownerDocument->createElementInputPassword($name, $maxlength, $size, $id, $value));
  }
  public function appendInputRadio($name, $id, $value, $checked) {
    return $this->appendChild($this->ownerDocument->createElementInputRadio($name, $id, $value, $checked));
  }
  public function appendInputCheckbox($name, $id, $value, $checked) {
    return $this->appendChild($this->ownerDocument->createElementInputCheckbox($name, $id, $value, $checked));
  }
  public function appendInputFile($name, $id, $accept) {
    return $this->appendChild($this->ownerDocument->createElementInputFile($name, $id, $accept));
  }
  public function appendInputSubmit($value) {
    return $this->appendChild($this->ownerDocument->createElementInputSubmit($value));
  }
  public function appendButton($value, $onclick = null) {
    return $this->appendChild($this->ownerDocument->createElementButton($value, $onclick));
  }
  public function appendTextArea($name, $columns, $rows, $id = null, $value = null) {
    return $this->appendChild($this->ownerDocument->createElementTextArea($name, $columns, $rows, $id, $value));
  }
  public function appendElementSelect($name, $id = null, $options = array(), $default = null) {
    return $this->appendChild($this->ownerDocument->createElementSelect($name, $id, $options, $default));
  }
  public function appendElementOption($key, $desc, $selected = false) {
    return $this->appendChild($this->ownerDocument->createElementOption($key, $desc, $selected));
  }
  public function appendLabel($for_id, $value) {
    return $this->appendChild($this->ownerDocument->createElementLabel($for_id, $value));
  }
  public function appendText($text) {
    return $this->appendChild($this->ownerDocument->createTextNode($text));
  }
  public function appendEntity($name) {
    return $this->appendChild($this->ownerDocument->createEntityReference($name));
  }
  public function appendComment($comment_data) {
    return $this->appendChild($this->ownerDocument->createComment($comment_data));
  }
  public function appendHTMLMarkup($htmldata) {
    $this->ownerDocument->appendHTMLMarkup($htmldata, $this);
  }
  public function appendXMLMarkup($xmldata) {
    $this->ownerDocument->appendXMLMarkup($xmldata, $this);
  }
  public function appendJSElement($jsdata) {
    $this->appendChild($this->ownerDocument->createElementJS($jsdata));
  }
  public function appendJSFile($jsdata, $defer = false, $async = false) {
    return $this->appendChild($this->ownerDocument->createElementJSFile($jsdata, $defer, $async));
  }
}

class ExtendedDocumentFragment extends DOMDocumentFragment {
  // ExtendedDocumentFragment PHP class
  // this extends the general PHP DOM Document Fragment class to simplify some usual constructs
  //
  // public function appendElement($name, [$value])
  //   appends a DOMDocument::createElement() as a child of this fragment (see there for params)
  //     returns the new child
  //
  // public function appendElementXML($name, $xmldata)
  //   appends a DOMDocument::createElement() with the given name as a child of this fragment,
  //   with an ExtendedDocument::createXMLFragment() of the given XML data inside
  //     returns the new child
  //
  // public function appendLink($target, [$value])
  //   appends an ExtendedDocument::createElementLink() as a child of this fragment (see there for params)
  //     returns the new child
  //
  // public function appendImage($src, [$alt_text])
  //   appends an ExtendedDocument::createElementImage() as a child of this document (see there for params)
  //     returns the new child
  //
  // public function appendForm($action, $method, $name, [$id])
  //   appends an ExtendedDocument::createElementForm() as a child of this fragment (see there for params)
  //     returns the new child
  //
  // public function appendFormDiv($action, $method, $name, [$id])
  //   appends an ExtendedDocument::createElementForm() as a child of this fragment (see there for params)
  //     returns an HTML <div> that is a child of the new child
  //
  // public function appendInputHidden($name, $value)
  //   appends an ExtendedDocument::createElementInputHidden() as a child of this fragment (see there for params)
  //     returns the new child
  //
  // public function appendInputText($name, $maxlength, $size, [$id], [$value])
  //   appends an ExtendedDocument::createElementInputText() as a child of this fragment (see there for params)
  //     returns the new child
  //
  // public function appendInputNumber($name, $maxlength, $size, [$id], [$value])
  //   appends an ExtendedDocument::createElementInputNumber() as a child of this fragment (see there for params)
  //     returns the new child
  //
  // public function appendInputEmail($name, $maxlength, $size, [$id], [$value])
  //   appends an ExtendedDocument::createElementInputEmail() as a child of this fragment (see there for params)
  //     returns the new child
  //
  // public function appendInputPassword($name, $maxlength, $size, [$id], [$value])
  //   appends an ExtendedDocument::createElementInputPassword() as a child of this fragment (see there for params)
  //     returns the new child
  //
  // public function appendInputRadio($name, $id, $value, $checked)
  //   appends an ExtendedDocument::createElementInputRadio() as a child of this fragment (see there for params)
  //     returns the new child
  //
  // public function appendInputCheckbox($name, $id, $value, $checked)
  //   appends an ExtendedDocument::createElementInputCheckbox() as a child of this fragment (see there for params)
  //     returns the new child
  //
  // public function appendInputFile($name, $id, $accept)
  //   appends an ExtendedDocument::createElementInputFile() as a child of this fragment (see there for params)
  //     returns the new child
  //
  // public function appendInputSubmit($value)
  //   appends an ExtendedDocument::createElementInputSubmit() as a child of this fragment (see there for params)
  //     returns the new child
  //
  // public function appendButton($value, $onclick = null)
  //   appends an ExtendedDocument::createElementButton() as a child of this fragment (see there for params)
  //     returns the new child
  //
  // public function appendTextArea($name, $columns, $rows, [$id], [$value])
  //   appends an ExtendedDocument::createElementTextArea() as a child of this fragment (see there for params)
  //     returns the new child
  //
  // public function appendElementSelect($name, [$id], [$options], [$default])
  //   appends an ExtendedDocument::createElementSelect() as a child of this fragment (see there for params)
  //     returns the new child
  //
  // public function appendElementOption($key, $desc, [$selected])
  //   appends an ExtendedDocument::createElementOption() as a child of this fragment (see there for params)
  //     returns the new child
  //
  // public function appendLabel($for_id, $value)
  //   appends an ExtendedDocument::createElementLabel() as a child of this fragment (see there for params)
  //     returns the new child
  //
  // public function appendText($text)
  //   appends a DOMDocument::createTextNode() as a child of this fragment (see there for params)
  //     returns the new child
  //
  // public function appendEntity($name)
  //   appends a DOMDocument::createEntityReference() as a child of this fragment (see there for params)
  //     returns the new child
  //
  // public function appendComment($comment_data)
  //   appends a DOMDocument::createComment() as a child of this fragment (see there for params)
  //     returns the new child
  //
  // public function appendHTMLMarkup($htmldata)
  //   appends a representation of the HTML data as children of this fragment
  //     NO return value!
  //
  // public function appendXMLMarkup($xmldata)
  //   appends a representation of the XML data as children of this fragment
  //     NO return value!
  //
  // public function appendJSElement($jsdata)
  //   appends an ExtendedDocument::createElementJS() as a child of this fragment (see there for params)
  //     NO return value!
  //
  // public function appendJSFile($jsURL, [$defer], [$async])
  //   appends an ExtendedDocument::createElementJSFile() as a child of this fragment (see there for params)
  //     returns the new child

  public function appendElement($name, $value = '') {
    return $this->appendChild($this->ownerDocument->createElement($name, $value));
  }
  public function appendElementXML($name, $xmldata) {
    $aelem = $this->appendChild($this->ownerDocument->createElement($name));
    $aelem->appendXMLMarkup($xmldata);
    return $aelem;
  }
  public function appendLink($target, $value = '') {
    return $this->appendChild($this->ownerDocument->createElementLink($target, $value));
  }
  public function appendImage($src, $alt_text = '') {
    return $this->appendChild($this->ownerDocument->createElementImage($src, $alt_text));
  }
  public function appendForm($action, $method, $name, $id = null) {
    return $this->appendChild($this->ownerDocument->createElementForm($action, $method, $name, $id));
  }
  public function appendFormDiv($action, $method, $name, $id = null) {
    $formelem = $this->appendChild($this->ownerDocument->createElementForm($action, $method, $name, $id));
    return $formelem->appendElement('div');
  }
  public function appendInputHidden($name, $value) {
    return $this->appendChild($this->ownerDocument->createElementInputHidden($name, $value));
  }
  public function appendInputText($name, $maxlength, $size, $id = null, $value = null) {
    return $this->appendChild($this->ownerDocument->createElementInputText($name, $maxlength, $size, $id, $value));
  }
  public function appendInputNumber($name, $maxlength, $size, $id = null, $value = null) {
    return $this->appendChild($this->ownerDocument->createElementInputNumber($name, $maxlength, $size, $id, $value));
  }
  public function appendInputEmail($name, $maxlength, $size, $id = null, $value = null) {
    return $this->appendChild($this->ownerDocument->createElementInputEmail($name, $maxlength, $size, $id, $value));
  }
  public function appendInputPassword($name, $maxlength, $size, $id = null, $value = null) {
    return $this->appendChild($this->ownerDocument->createElementInputPassword($name, $maxlength, $size, $id, $value));
  }
  public function appendInputRadio($name, $id, $value, $checked) {
    return $this->appendChild($this->ownerDocument->createElementInputRadio($name, $id, $value, $checked));
  }
  public function appendInputCheckbox($name, $id, $value, $checked) {
    return $this->appendChild($this->ownerDocument->createElementInputCheckbox($name, $id, $value, $checked));
  }
  public function appendInputFile($name, $id, $accept) {
    return $this->appendChild($this->ownerDocument->createElementInputFile($name, $id, $accept));
  }
  public function appendInputSubmit($value) {
    return $this->appendChild($this->ownerDocument->createElementInputSubmit($value));
  }
  public function appendButton($value, $onclick = null) {
    return $this->appendChild($this->ownerDocument->createElementButton($value, $onclick));
  }
  public function appendTextArea($name, $columns, $rows, $id = null, $value = null) {
    return $this->appendChild($this->ownerDocument->createElementTextArea($name, $columns, $rows, $id, $value));
  }
  public function appendElementSelect($name, $id = null, $options = array(), $default = null) {
    return $this->appendChild($this->ownerDocument->createElementSelect($name, $id, $options, $default));
  }
  public function appendElementOption($key, $desc, $selected = false) {
    return $this->appendChild($this->ownerDocument->createElementOption($key, $desc, $selected));
  }
  public function appendLabel($for_id, $value) {
    return $this->appendChild($this->ownerDocument->createElementLabel($for_id, $value));
  }
  public function appendText($text) {
    return $this->appendChild($this->ownerDocument->createTextNode($text));
  }
  public function appendEntity($name) {
    return $this->appendChild($this->ownerDocument->createEntityReference($name));
  }
  public function appendComment($comment_data) {
    return $this->appendChild($this->ownerDocument->createComment($comment_data));
  }
  public function appendHTMLMarkup($htmldata) {
    $this->ownerDocument->appendHTMLMarkup($htmldata, $this);
  }
  public function appendXMLMarkup($xmldata) {
    $this->ownerDocument->appendXMLMarkup($xmldata, $this);
  }
  public function appendJSElement($jsdata) {
    $this->appendChild($this->ownerDocument->createElementJS($jsdata));
  }
  public function appendJSFile($jsdata, $defer = false, $async = false) {
    return $this->appendChild($this->ownerDocument->createElementJSFile($jsdata, $defer, $async));
  }
}
?>
