<?php
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is KaiRo's userAgent detection.
 *
 * The Initial Developer of the Original Code is
 * KaiRo - Robert Kaiser.
 * Portions created by the Initial Developer are Copyright (C) 2003
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s): Robert Kaiser <kairo@kairo.at>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

class userAgent {
  // userAgent PHP class
  // get user agent and tell us what Browser is accessing
  //
  // function __construct([$ua_string])
  //   CONSTRUCTOR; reads UA string (or takes the optional given UA string) and gets info from that into our variables.
  //
  // private $uastring
  //   the plain User Agent string
  // private $brand
  //   the User Agent brand name
  // private $version
  //   the User Agent version
  // private $bot
  //   bool: true if this agent is a bot
  // private $uadata
  //   array of static user agent data (static vars in functions are set for all objects of this class!)
  //
  // public function getBrand()
  //   returns the User Agent Brand Name
  //
  // public function getVersion()
  //   returns the User Agent version
  //
  // public function getAcceptLanguages()
  //   returns an associated array with the accepted languages of this UA
  //     keys are language codes, values are q factors (weights)
  //
  // public function getUAString()
  //   returns the full User Agent string
  //
  // public function getEngine()
  //   returns a string telling the detected rendering engine, null if we can't detect
  //     one of gecko|khtml|trident|tasman|nscp|presto|gzilla|gtkhtml|links|icestorm|unknown
  //
  // public function hasEngine($rnd_engine)
  //   returns true if the given rendering engine was detected
  //
  // public function getEngineVersion()
  //   returns a the version number for the rendering engine
  //     this may be the same as getVersion() for many engines, or null if we don't know
  //
  // public function getOS()
  //   returns a string telling the detected operating system, null if we can't detect
  //     might be very verbose, uses no abbreviations for most names
  //
  // public function getPlatform()
  //   returns a string telling the detected OS platform, null if we can't detect
  //     one of windows|linux|mac|solaris|unknown
  //
  // public function getLanguage() {
  //   returns a string telling the detected browser UI language, null if we can't detect
  //     should be an ISO code
  //
  // public function isBot()
  //   returns true if User Agent seems to be a bot
  //
  // *** functions that only return useable info for some agents ***
  //
  // public function getGeckoDate()
  //   returns the Gecko date for Gecko-based browsers, null for others
  //
  // *** functions for compat to older versions of this class ***
  //
  // public function isns()
  //   returns true if User Agent seems to be Netscape brand, false if not
  // public function isns4()
  //   returns true if User Agent seems to be Netscape Communicator 4.x, false if not
  // public function isie()
  //   returns true if User Agent seems to be a version of Internet Exploder, false if not
  // public function geckobased()
  //   returns true if User Agent seems to be a Gecko-based browser, false if not
  // public function geckodate()
  //   returns the Gecko date when it's a Gecko-based browser, 0 if not
  // public function khtmlbased()
  //   returns true if User Agent seems to be a KHTML-based browser, false if not

  // collection of some known User Agent Strings:
  // *** see testbed/ua_list_raw.txt ***
  // *** see also http://www.pgts.com.au/pgtsj/pgtsj0208c.html ***

  private $uastring;
  private $brand;
  private $version;
  private $bot = false;
  private $uadata = array();

  function __construct($ua_string = '') {
    // *** constructor ***
    if (strlen($ua_string)) {
      $this->uastring = $ua_string;
    }
    else {
      // read raw UA string
      $this->uastring = $_SERVER['HTTP_USER_AGENT'];
    }

    // get UA brand and version
    $this->brand = 'Unknown'; $this->version = null;
    // find reasonable defaults
    if (preg_match('|([0-9a-zA-Z\.:()_ -]+)/([0-9a-zA-Z\._+-]+)|', $this->uastring, $regs)) {
      $this->brand = trim($regs[1]);
      $this->version = $regs[2];
    }
    elseif (preg_match('|^([a-zA-Z\._ -]+)[_ -][vV]?([0-9][0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = trim($regs[1]);
      $this->version = $regs[2];
    }
    elseif (preg_match('|^([a-zA-Z\._ -]+)|', $this->uastring, $regs)) {
      $this->brand = trim($regs[1]);
      $this->version = null;
    }
    $this->bot = (strpos(strtolower($this->brand), 'bot') !== false)
                 || (strpos(strtolower($this->brand), 'crawler') !== false)
                 || (strpos(strtolower($this->brand), 'spider') !== false);

    // search for any real and/or special UAs
    if (preg_match('|Netscape6/([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'Netscape';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|Netscape/([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'Netscape';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|Chimera/([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'Chimera';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|Camino/([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'Camino';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|Phoenix/([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'Phoenix';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|Mozilla Firebird/([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'Mozilla Firebird';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|Flock/([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'Flock';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|Firefox/([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'Firefox';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|SeaMonkey/([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'SeaMonkey';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|Iceape/([0-9a-zA-Z\.+]+)|i', $this->uastring, $regs)) {
      $this->brand = 'IceApe';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|Iceweasel/([0-9a-zA-Z\.+]+)|i', $this->uastring, $regs)) {
      $this->brand = 'IceWeasel';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|Galeon/([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'Galeon';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|Epiphany/([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'Epiphany';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|K-Meleon/([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'K-Meleon';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|AOL[/ ]([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'AOL';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|rv:([0-9a-zA-Z\.+]+)|', $this->uastring, $regs) && strstr($this->uastring, "Mozilla/") && strstr($this->uastring, "Gecko/")) {
      $this->brand = 'Mozilla';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|m([0-9]+)\)|', $this->uastring, $regs) && strstr($this->uastring, "Mozilla/") && strstr($this->uastring, "Gecko/")) {
      $this->brand = 'Mozilla';
      $this->version = 'M'.$regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|Opera\/([^\(]+) \(.*; Opera Mini; |', $this->uastring, $regs)) {
      $this->brand = 'Opera Mini';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('/Opera\/[^\(]+ \(.*; Opera Mini\/([^;]+); /i', $this->uastring, $regs)) {
      $this->brand = 'Opera Mini';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|Opera[ /]([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'Opera';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|OmniWeb/([0-9a-zA-Z\.+-]+)|', $this->uastring, $regs)) {
      $this->brand = 'OmniWeb';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|Konqueror/([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'Konqueror';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|Shiira/([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'Shiira';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|Safari/([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'Safari';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|AppleWebKit/([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'AppleWebKit';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|MSFrontPage/([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'Microsoft FrontPage';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|iCab[/ ]([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'iCab';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|IBrowse[/ ]([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'IBrowse';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|ICEbrowser/([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'ICEbrowser';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|ICE Browser/v([0-9a-zA-Z\._+]+)|', $this->uastring, $regs)) {
      $this->brand = 'ICEbrowser';
      $this->version = str_replace('_', '.', $regs[1]);
      $this->bot = false;
    }
    elseif (preg_match('|NetPositive/([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'NetPositive';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|WebPro/([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'WebPro (Novarra)';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|; OffByOne;|', $this->uastring, $regs)) {
      $this->brand = 'Off By One';
      $this->version = null;
      $this->bot = false;
    }
    elseif (preg_match('|PSP \(PlayStation Portable\); ([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'PlayStation Portable';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|NetFront/([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'NetFront';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|UP.Browser/([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'UP.Browser';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|UP.Link/([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'UP.Link';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|AU-MIC-([0-9A-Z]+/[0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'Obigo';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|Nokia([0-9a-zA-Z]+/[0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'Nokia';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|SonyEricsson([0-9a-zA-Z]+/[0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'SonyEricsson';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|SIE-([0-9a-zA-Z]+/[0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'Siemens';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|MOT-([0-9a-zA-Z]+/[0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'Motorola';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|IBM-WebExplorer-DLL/v([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'WebExplorer';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|ELinks \(([0-9a-zA-Z\.+]+);|', $this->uastring, $regs)) {
      $this->brand = 'ELinks';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|Links \(([0-9a-zA-Z\.+]+);|', $this->uastring, $regs)) {
      $this->brand = 'Links';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|wget[/ ]([0-9a-zA-Z\.+]+)|i', $this->uastring, $regs)) {
      $this->brand = 'wget';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|; arexx\)|i', $this->uastring, $regs)) {
      $this->brand = 'ARexx';
      $this->version = null;
      $this->bot = false;
    }
    elseif (preg_match('|ZyBorg/([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'ZyBorg';
      $this->version = $regs[1];
      $this->bot = true;
    }
    elseif (preg_match('|Googlebot/?([0-9a-zA-Z\.+]+)?|', $this->uastring, $regs)) {
      $this->brand = 'Googlebot';
      $this->version = $regs[1];
      $this->bot = true;
    }
    elseif (preg_match('|Ask Jeeves/([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'Ask Jeeves';
      $this->version = $regs[1];
      $this->bot = true;
    }
    elseif (preg_match('|Slurp|', $this->uastring, $regs)) {
      $this->brand = 'Slurp';
      $this->version = null;
      $this->bot = true;
    }
    elseif (preg_match('|Gulper Web Bot ([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'Gulper Web Bot';
      $this->version = $regs[1];
      $this->bot = true;
    }
    elseif (preg_match('|HTTrack ([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'HTTrack';
      $this->version = $regs[1];
      $this->bot = true;
    }
    elseif (preg_match('|Microsoft URL Control - ([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'Microsoft URL Control';
      $this->version = $regs[1];
      $this->bot = true;
    }
    elseif (preg_match('|([0-9a-zA-Z\.+]+)_AC-Plug|', $this->uastring, $regs)) {
      $this->brand = 'AC-Plug';
      $this->version = $regs[1];
      $this->bot = true;
    }
    elseif (preg_match('|^Internet Explorer 5.5|', $this->uastring)) {
      $this->brand = 'Unknown bot (IE5.5)';
      $this->version = null;
      $this->bot = true;
    }
    elseif (preg_match('|^Mozilla[\s ]*$|', $this->uastring)) {
      $this->brand = 'Unknown bot (Mozilla)';
      $this->version = null;
      $this->bot = true;
    }
    elseif (preg_match('|http://www.almaden.ibm.com/cs/crawler|', $this->uastring)) {
      $this->brand = 'almaden crawler';
      $this->version = null;
      $this->bot = true;
    }
    elseif (preg_match('|B-l-i-t-z-B-O-T|', $this->uastring) || preg_match('|B l i t z B O T @ t r i c u s . n e t|', $this->uastring)) {
      $this->brand = 'BlitzBOT';
      $this->version = null;
      $this->bot = true;
    }
    elseif (preg_match('|sitecheck.internetseer.com|', $this->uastring)) {
      $this->brand = 'internetseer';
      $this->version = null;
      $this->bot = true;
    }
    elseif (preg_match('|Girafabot|', $this->uastring)) {
      $this->brand = 'Girafabot';
      $this->version = null;
      $this->bot = true;
    }
    elseif (preg_match('|efp@gmx.net|', $this->uastring)) {
      $this->brand = 'efp';
      $this->version = null;
      $this->bot = true;
    }
    elseif (preg_match('|42_HAL|', $this->uastring)) {
      $this->brand = '42_HAL';
      $this->version = null;
      $this->bot = true;
    }
    elseif (preg_match('|Baiduspider|i', $this->uastring)) {
      $this->brand = 'BaiDuSpider';
      $this->version = null;
      $this->bot = true;
    }
    elseif (preg_match('|Indy Library|', $this->uastring)) {
      $this->brand = 'Indy Library';
      $this->version = null;
      $this->bot = true;
    }
    elseif (preg_match('|^Firefly|', $this->uastring)) {
      // comes here with correct value but would be detected as MSIE
    }
    elseif (preg_match('|Steganos Internet Anonym([0-9a-zA-Z\. +]*)|', $this->uastring, $regs)) {
      $this->brand = 'Steganos Internet Anonym';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|Avant Browser[^/]|', $this->uastring)) {
      $this->brand = 'Avant Browser';
      $this->version = null;
      $this->bot = false;
    }
    elseif (preg_match('|Browser[^/]+(http://www.avantbrowser.com)|', $this->uastring)) {
      $this->brand = 'Avant Browser';
      $this->version = null;
      $this->bot = false;
    }
    elseif (preg_match('|Maxthon|', $this->uastring)) {
      $this->brand = 'Maxthon';
      $this->version = null;
      $this->bot = false;
    }
    elseif (preg_match('|MyIE2|', $this->uastring)) {
      $this->brand = 'MyIE2';
      $this->version = null;
      $this->bot = false;
    }
    elseif (preg_match('|Crazy Browser ([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'Crazy Browser';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|AvantGo ([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'AvantGo';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|MSN ([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'MSN';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|America Online Browser [0-9a-zA-Z\.+]+; rev([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'AOL Browser';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|MS FrontPage ([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'Microsoft FrontPage';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|Microsoft Internet Explorer/4.0b1|', $this->uastring, $regs)) {
      $this->brand = 'Microsoft Internet Explorer';
      $this->version = '1.0';
      $this->bot = false;
    }
    elseif (preg_match('|MSIE ([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'Microsoft Internet Explorer';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|MSPIE ([0-9a-zA-Z\.+]+)|', $this->uastring, $regs)) {
      $this->brand = 'Microsoft Pocket Internet Explorer';
      $this->version = $regs[1];
      $this->bot = false;
    }
    elseif (preg_match('|Mozilla/([0-9a-zA-Z\.+]+)|', $this->uastring, $regs) && (strpos($this->uastring, 'compatible;') === false) && (strpos($this->uastring, 'Gecko/') === false)) {
      $this->brand = 'Netscape';
      $this->version = $regs[1];
      if (intval($this->version) == 4) { $this->brand .= ' Communicator'; }
      $this->bot = false;
    }
    elseif (preg_match('|Mozilla/([0-9a-zA-Z\.+]+)|', $this->uastring, $regs) && (strpos($this->uastring, 'compatible;') !== false)) {
      $this->brand = 'Mozilla-compatible (unknown)';
      $this->version = null;
      $this->bot = false;
    }

    $botArray = array('Scooter','Spinne','Vagabondo','Firefly','Scrubby','NG','Pompos','Szukacz','ASPseek',
                      'NetResearchServer','LinkWalker','Zeus','W3C_Validator','ZyBorg','Ask Jeeves','ia_archiver',
                      'PingALink Monitoring Services','IlTrovatore-Setaccio','Nutch','Mercator','search.ch',
                      'appie','larbin','NutchCVS','ObjectsSearch','Webchat','Mediapartners-Google','Schmozilla',
                      'FavOrg','findlinks','DataCha0s','ichiro','Francis','','','','','','','');

    if (in_array($this->brand, $botArray)) {
      $this->bot = true;
    }
  }

  public function getBrand() { return $this->brand; }
  public function getVersion() { return $this->version; }

  public function getAcceptLanguages() {
    if (!isset($this->uadata['accept-languages'])) {
      $headers = getAllHeaders();
      $accLcomp = explode(',', $headers['Accept-Language']);
      $accLang = array();
      foreach ($accLcomp as $lcomp) {
        if (strlen($lcomp)) {
          $ldef = explode(';', $lcomp);
          $accLang[$ldef[0]] = (float)((strpos(@$ldef[1],'q=')===0)?substr($ldef[1],2):1);
        }
      }
      $this->uadata['accept-languages'] = $accLang;
    }
  return $this->uadata['accept-languages'];
  }

  public function getUAString() { return $this->uastring; }

  public function getEngine() {
    // return gecko|khtml|trident|tasman|nscp|presto|gzilla|gtkhtml|links|icestorm|unknown
    if (!isset($this->uadata['engine'])) {
      $this->uadata['engine'] = 'unknown';
      $this->uadata['geckodate'] = null;
      if (preg_match('|Gecko/([0-9]+)|', $this->uastring, $regs)) {
        $this->uadata['engine'] = 'gecko';
        $this->uadata['geckodate'] = $regs[1];
      }
      elseif ((strpos($this->brand, 'Internet Explorer') !== false) ||  (strpos($this->brand, 'FrontPage') !== false)) {
        if ((strpos(strtolower($this->uastring), 'mac') !== false) && (intval($this->getVersion()) >= 5)) {
          $this->uadata['engine'] = 'tasman';
        }
        else {
          $this->uadata['engine'] = 'trident';
        }
      }
      elseif ((strpos($this->brand, 'Konqueror') !== false) || (strpos($this->brand, 'Safari') !== false) ||
              (strpos($this->brand, 'Shiira') !== false) ||
              (strpos($this->brand, 'AppleWebKit') !== false) || (strpos($this->brand, 'OmniWeb') !== false)) {
        $this->uadata['engine'] = 'khtml';
      }
      elseif (strpos($this->brand, 'Netscape') !== false) {
        // non-Gecko Netscape browsers
        if (intval($this->version) <= 4) {
          $this->uadata['engine'] = 'nscp';
        }
        elseif (strpos($this->uastring, 'MSIE') !== false) {
          $this->uadata['engine'] = 'trident';
        }
      }
      elseif (strpos($this->brand, 'Opera') !== false) {
        $this->uadata['engine'] = 'presto';
      }
      elseif (strpos($this->brand, 'Dillo') !== false) {
        $this->uadata['engine'] = 'gzilla';
      }
      elseif ((strpos($this->brand, 'ELinks') !== false) || (strpos($this->brand, 'Links') !== false)) {
        $this->uadata['engine'] = 'links';
      }
      elseif ((strpos($this->brand, 'ICEbrowser') !== false) || (strpos($this->brand, 'ICE Browser') !== false)) {
        $this->uadata['engine'] = 'icestorm';
      }
      elseif ((strpos($this->brand, 'Avant') !== false) || (strpos($this->brand, 'Crazy Browser') !== false) ||
              (strpos($this->brand, 'AOL') !== false) || (strpos($this->brand, 'MSN') !== false) ||
              (strpos($this->brand, 'MyIE2') !== false) || (strpos($this->brand, 'Maxthon') !== false)) {
        $this->uadata['engine'] = 'trident';
      }
      elseif (strpos($this->brand, 'Galeon') !== false) {
        $this->uadata['engine'] = 'gecko';
      }
      elseif (strpos($this->brand, 'WebPro') !== false) {
        $this->uadata['engine'] = 'nscp';
      }
    }
  return $this->uadata['engine'];
  }

  public function hasEngine($rnd_engine) { return ($this->getEngine() == $rnd_engine); }

  public function getEngineVersion() {
    if (!isset($this->uadata['eng_version'])) {
      $this->uadata['eng_version'] = null;
      // getOS() should get the date for us
      $this->getOS();
    }
  return $this->uadata['eng_version'];
  }

  public function getOS() {
    if (!isset($this->uadata['os'])) {
      $this->uadata['os'] = null;
      if ($this->hasEngine('gecko')) {
        if (preg_match('|Mozilla/5.0 \(([^;]+); [^;]+; ([^;]+); ([^;]+); rv:([^\);]+)(; [^\)]+)?\)|', $this->uastring, $regs)) {
          $this->uadata['os'] = $regs[2];
          $this->uadata['lang'] = (strpos($regs[3],'chrome://')===false)?$regs[3]:null;
          $this->uadata['eng_version'] = $regs[4];
        }
        elseif (preg_match('|Mozilla/5.0 \(([^;]+); [^;]+; ([^;]+); rv:([^\);]+)(; [^\)]+)?\)|', $this->uastring, $regs)) {
          $this->uadata['os'] = $regs[2];
          $this->uadata['lang'] = null;
          $this->uadata['eng_version'] = $regs[3];
        }
        elseif (preg_match('|Mozilla/5.0 \(([^;]+); [^;]+; ([^;]+); ([^;]+); m([^\);]+)\)|', $this->uastring, $regs)) {
          $this->uadata['os'] = $regs[2];
          $this->uadata['lang'] = $regs[3];
          $this->uadata['eng_version'] = 'M'.$regs[4];
        }
        elseif (preg_match('|Mozilla/5.0 \(([^;]+); [^;]+; ([^;]+); m([^\);]+)\)|', $this->uastring, $regs)) {
          $this->uadata['os'] = $regs[1];
          $this->uadata['lang'] = $regs[2];
          $this->uadata['eng_version'] = 'M'.$regs[3];
        }
        elseif (preg_match('|Mozilla/5.0 \(([^;]+); [^;]+; ([^;]+); ([^\);]+)\)|', $this->uastring, $regs)) {
          $this->uadata['os'] = $regs[2];
          $this->uadata['lang'] = $regs[3];
          $this->uadata['eng_version'] = null;
        }
        elseif (preg_match('|Mozilla/5.0 \(([^;]+); ([^;]+); rv:([^\);]+)\)|', $this->uastring, $regs)) {
          $this->uadata['os'] = $regs[2];
          $this->uadata['lang'] = null;
          $this->uadata['eng_version'] = $regs[3];
        }
        elseif (preg_match('|Mozilla/5.0 \(([^;]+); [^;]+; ([^\);]+)\)|', $this->uastring, $regs)) {
          $this->uadata['os'] = $regs[2];
          $this->uadata['lang'] = null;
          $this->uadata['eng_version'] = null;
        }
        elseif (preg_match('|Mozilla/5.0 Galeon/[^\(]+ \(([^;]+); ([^;]+);[^\)]+\)|', $this->uastring, $regs)) {
          $this->uadata['os'] = $regs[2];
          $this->uadata['lang'] = null;
          $this->uadata['eng_version'] = null;
        }
        elseif (preg_match('|Debian/|', $this->uastring, $regs)) {
          $this->uadata['os'] = 'Debian Linux';
          $this->uadata['lang'] = null;
          $this->uadata['eng_version'] = null;
        }
      }
      elseif ($this->hasEngine('trident') || $this->hasEngine('tasman')) {
        if (preg_match('/Mozilla\/[^\(]+ \(compatible *; MSP?IE ([^;]+)[^\)]*; ?((?:Mac|Win)[^;]+)[^\)]*\)/i', $this->uastring, $regs)) {
          $this->uadata['eng_version'] = (strpos($this->uastring,'MSPIE')!==false)?null:$regs[1];
          $this->uadata['os'] = $regs[2];
          $this->uadata['lang'] = null;
        }
        elseif (preg_match('/Mozilla\/[^\(]+ \(compatible *; MSIE ([^;]+)[^\)]*\)/i', $this->uastring, $regs)) {
          $this->uadata['eng_version'] = $regs[1];
          $this->uadata['os'] = null;
          $this->uadata['lang'] = null;
        }
        elseif (preg_match('/Microsoft Internet Explorer\/[^\s]+ \(((?:Mac|Win)[^;\)]+)\)/i', $this->uastring, $regs)) {
          $this->uadata['eng_version'] = $this->getVersion();
          $this->uadata['os'] = $regs[1];
          $this->uadata['lang'] = null;
        }
        elseif (preg_match('/Microsoft Pocket Internet Explorer\/[^\s]+/i', $this->uastring, $regs)) {
          $this->uadata['eng_version'] = null;
          $this->uadata['os'] = 'Windows CE';
          $this->uadata['lang'] = null;
        }
      }
      elseif ($this->hasEngine('khtml')) {
        if (preg_match('/Mozilla\/[^\(]+ \(compatible; Konqueror\/([^;]+); ([^;]+); ([^;]+); ([^;]+); ([^\);]+)\)(?: KHTML\/([0-9a-zA-Z\.+]+))?/i', $this->uastring, $regs)) {
          $this->uadata['eng_version'] = strlen($regs[6])?$regs[6]:$regs[1];
          $this->uadata['os'] = $regs[2];
          $this->uadata['lang'] = $regs[5];
        }
        elseif (preg_match('/Mozilla\/[^\(]+ \(compatible; Konqueror\/([^;]+); ([^\);]+)[^\)]*\)(?: KHTML\/([0-9a-zA-Z\.+]+))?/i', $this->uastring, $regs)) {
          $this->uadata['eng_version'] = strlen($regs[3])?$regs[3]:$regs[1];
          $this->uadata['os'] = $regs[2];
          $this->uadata['lang'] = null;
        }
        elseif (preg_match('|Mozilla/5.0 \(([^;]+); U; ([^;]+); ([^\);]+)\)|', $this->uastring, $regs)) {
          $this->uadata['os'] = $regs[2];
          $this->uadata['lang'] = $regs[3];
          $this->uadata['eng_version'] = null;
        }
        elseif (preg_match('|Mozilla/5.0 \(([^;]+); U; ([^\);]+)\)|', $this->uastring, $regs)) {
          $this->uadata['os'] = $regs[1];
          $this->uadata['lang'] = $regs[2];
          $this->uadata['eng_version'] = null;
        }
        elseif (preg_match('/Mozilla\/[^\(]+ \(compatible; [^;]+; ([^\);]+)\)/i', $this->uastring, $regs)) {
          $this->uadata['os'] = $regs[1];
          $this->uadata['lang'] = null;
          $this->uadata['eng_version'] = null;
        }
      }
      elseif ($this->hasEngine('presto')) {
        // Opera < 8
        if (preg_match('/Opera\/[^\(]+ \((?:X11; )?([^;]+)[^\)]+\) +\[([a-z_-]+)\]/i', $this->uastring, $regs)) {
          $this->uadata['eng_version'] = $this->getVersion();
          $this->uadata['os'] = $regs[1];
          $this->uadata['lang'] = $regs[2];
        }
        elseif (preg_match('/Mozilla\/[^\(]+ \(compatible; MSIE [^;]+; (?:X11; )?([^;\)]+)[^\)]*\) Opera [^ ]+ +\[([a-z_-]+)\]/i', $this->uastring, $regs)) {
          $this->uadata['eng_version'] = $this->getVersion();
          $this->uadata['os'] = $regs[1];
          $this->uadata['lang'] = $regs[2];
        }
        elseif (preg_match('/Mozilla\/[^\(]+ \((?:X11; )?([^;]+);.+\) Opera [^ ]+ \[([a-z_-]+)\]/i', $this->uastring, $regs)) {
          $this->uadata['eng_version'] = $this->getVersion();
          $this->uadata['os'] = $regs[1];
          $this->uadata['lang'] = $regs[2];
        }
        // Opera mini
        elseif (preg_match('/Opera\/([^\(]+) \((?:X11; )?([^;]+); Opera Mini; ([a-z_-]+); /i', $this->uastring, $regs)) {
          $this->uadata['eng_version'] = null;
          $this->uadata['os'] = $regs[2];
          $this->uadata['lang'] = $regs[3];
        }
        elseif (preg_match('/Opera\/([^\(]+) \((?:X11; )?([^;]+); Opera Mini\/[^;]+; ([a-z_-]+); /i', $this->uastring, $regs)) {
          $this->uadata['eng_version'] = $regs[1];
          $this->uadata['os'] = $regs[2];
          $this->uadata['lang'] = $regs[3];
        }
        // Opera >= 8
        elseif (preg_match('/Opera\/[^\(]+ \((?:X11; )?([^;]+); [^\)]+; ([a-z_-]+)\)/i', $this->uastring, $regs)) {
          $this->uadata['eng_version'] = $this->getVersion();
          $this->uadata['os'] = $regs[1];
          $this->uadata['lang'] = $regs[2];
        }
        elseif (preg_match('/Mozilla\/[^\(]+ \(compatible; MSIE [^;]+; (?:X11; )?([^;]+); ([a-z_-]+)\) Opera [^ ]+/i', $this->uastring, $regs)) {
          $this->uadata['eng_version'] = $this->getVersion();
          $this->uadata['os'] = $regs[1];
          $this->uadata['lang'] = $regs[2];
        }
        elseif (preg_match('/Mozilla\/[^\(]+ \((?:X11; )?([^;]+);.+; ([a-z_-]+)\) Opera [^ ]+/i', $this->uastring, $regs)) {
          $this->uadata['eng_version'] = $this->getVersion();
          $this->uadata['os'] = $regs[1];
          $this->uadata['lang'] = $regs[2];
        }
      }
      elseif ($this->hasEngine('nscp')) {
        if (preg_match('/Mozilla\/([0-9a-zA-Z\.+]+) (?:\[([a-z_-]+)\][^\(]+)?\(X11; [^;]+; ([^\)]+)\)/i', $this->uastring, $regs)) {
          $this->uadata['eng_version'] = $regs[1];
          $this->uadata['os'] = $regs[3];
          $this->uadata['lang'] = $regs[2];
        }
        elseif (preg_match('/Mozilla\/([0-9a-zA-Z\.+]+) (?:\[([a-z_-]+)\][^\(]+)?\(([^;]+);[^\)]+\)/i', $this->uastring, $regs)) {
          $this->uadata['eng_version'] = $regs[1];
          $this->uadata['os'] = $regs[3];
          $this->uadata['lang'] = $regs[2];
        }
        elseif (preg_match('/Mozilla\/([0-9a-zA-Z\.+]+)[^\(]+\(([^;]+);[^\)]+\)/i', $this->uastring, $regs)) {
          $this->uadata['eng_version'] = $regs[1];
          $this->uadata['os'] = $regs[2];
          $this->uadata['lang'] = null;
        }
      }
      elseif ($this->hasEngine('gzilla')) {
        $this->uadata['eng_version'] = $this->getVersion();
        $this->uadata['os'] = null;
        $this->uadata['lang'] = null;
      }
      elseif ($this->hasEngine('links')) {
        if (preg_match('/E?Links[^\(]+\([^;]+; ([^;]+)[^\)]+\)/i', $this->uastring, $regs)) {
          $this->uadata['eng_version'] = null;
          $this->uadata['os'] = $regs[1];
          $this->uadata['lang'] = null;
        }
      }
      elseif ($this->hasEngine('icestorm')) {
        if (preg_match('/ICE Browser\/v?([0-9a-zA-Z\._+]+) \(Java [^;]+; ([^\)]+)\)/i', $this->uastring, $regs)) {
          $this->uadata['eng_version'] = str_replace('_', '.', $regs[1]);
          $this->uadata['os'] = $regs[2];
          $this->uadata['lang'] = null;
        }
        elseif (preg_match('/Mozilla\/[^\(]+ \((?:X11; )?([^;]+);.+; ([a-z_-]+)\).* ICEbrowser\/([0-9a-zA-Z\._+]+)/i', $this->uastring, $regs)) {
          $this->uadata['eng_version'] = $regs[3];
          $this->uadata['os'] = $regs[1];
          $this->uadata['lang'] = $regs[2];
        }
      }
      else {
        $this->uadata['eng_version'] = null;
        $this->uadata['lang'] = null;
        if (preg_match('/AmigaOS/i', $this->uastring, $regs)) {
          $this->uadata['os'] = 'AmigaOS';
        }
        elseif (preg_match('/curl\/[^\(]+\(([^\);]+)/i', $this->uastring, $regs)) {
          $this->uadata['os'] = $regs[1];
        }
        elseif (preg_match('/NCSA[_ ]Mosaic\/[^\(]+\((?:.*;)?([^\);]+)/i', $this->uastring, $regs)) {
          $this->uadata['os'] = trim($regs[1]);
        }
        elseif (preg_match('/iCab.*(Mac[^\);]+).*?\)/i', $this->uastring, $regs)) {
          $this->uadata['os'] = trim($regs[1]);
        }
        elseif (preg_match('/SymbianOS\/([^ ]+)/i', $this->uastring, $regs)) {
          $this->uadata['os'] = 'SymbianOS '.$regs[1];
        }
      }
      if ($this->uadata['os'] == 'Win 9x 4.90') { $this->uadata['os'] = 'Windows ME'; }
      elseif ($this->uadata['os'] == 'WinNT4.0') { $this->uadata['os'] = 'Windows NT 4.0'; }
      elseif ($this->uadata['os'] == 'Windows NT 5.0') { $this->uadata['os'] = 'Windows 2000'; }
      elseif ($this->uadata['os'] == 'Windows NT 5.1') { $this->uadata['os'] = 'Windows XP'; }
      elseif ($this->uadata['os'] == 'Windows NT 5.2') { $this->uadata['os'] = 'Windows 2003'; }
      elseif ($this->uadata['os'] == 'Windows NT 5.2 x64') { $this->uadata['os'] = 'Windows 2003 (64bit)'; }
      elseif ($this->uadata['os'] == 'Windows NT 6.0') { $this->uadata['os'] = 'Windows Vista'; }
      elseif ($this->uadata['os'] == 'Win95') { $this->uadata['os'] = 'Windows 95'; }
      elseif ($this->uadata['os'] == 'Win98') { $this->uadata['os'] = 'Windows 98'; }
      elseif ($this->uadata['os'] == 'WinNT') { $this->uadata['os'] = 'Windows NT'; }
      elseif ($this->uadata['os'] == 'Win32') { $this->uadata['os'] = 'Windows (32bit)'; }
      elseif ($this->uadata['os'] == 'Win64') { $this->uadata['os'] = 'Windows (64bit)'; }
      elseif (preg_match('/Mac ?OS ?X/i',$this->uadata['os'])) { $this->uadata['os'] = 'MacOS X'; }
      elseif (preg_match('/Mac_P(ower|)PC/i',$this->uadata['os'])) { $this->uadata['os'] = 'MacOS'; }
      elseif (strpos($this->uadata['os'], 'darwin') !== false) { $this->uadata['os'] = 'MacOS X'; }
      elseif (strpos($this->uadata['os'], 'Darwin') !== false) { $this->uadata['os'] = 'MacOS X'; }
      elseif (strpos($this->uadata['os'], 'apple') !== false) { $this->uadata['os'] = 'MacOS'; }
      elseif (strpos($this->uadata['os'], 'Macintosh') !== false) { $this->uadata['os'] = 'MacOS'; }
      elseif (strpos($this->uadata['os'], 'linux') !== false) { $this->uadata['os'] = 'Linux'; }

      if (strpos($this->uadata['os'], 'Win') !== false) { $this->uadata['platform'] = 'Windows'; }
      elseif (strpos($this->uadata['os'], 'Mac') !== false) { $this->uadata['platform'] = 'Macintosh'; }
      elseif (strpos($this->uadata['os'], 'Linux') !== false) { $this->uadata['platform'] = 'Linux'; }
      elseif (strpos($this->uadata['os'], 'Solaris') !== false) { $this->uadata['platform'] = 'Solaris'; }
      elseif (strpos($this->uadata['os'], 'SunOS') !== false) { $this->uadata['platform'] = 'Solaris'; }
      elseif (strpos($this->uadata['os'], 'BeOS') !== false) { $this->uadata['platform'] = 'BeOS'; }
      elseif (strpos($this->uadata['os'], 'FreeBSD') !== false) { $this->uadata['platform'] = 'FreeBSD'; }
      elseif (strpos($this->uadata['os'], 'OpenBSD') !== false) { $this->uadata['platform'] = 'OpenBSD'; }
      elseif (strpos($this->uadata['os'], 'NetBSD') !== false) { $this->uadata['platform'] = 'NetBSD'; }
      elseif (strpos($this->uadata['os'], 'AIX') !== false) { $this->uadata['platform'] = 'AIX'; }
      elseif (strpos($this->uadata['os'], 'IRIX') !== false) { $this->uadata['platform'] = 'IRIX'; }
      elseif (strpos($this->uadata['os'], 'HP-UX') !== false) { $this->uadata['platform'] = 'HP-UX'; }
      elseif (strpos($this->uadata['os'], 'AmigaOS') !== false) { $this->uadata['platform'] = 'Amiga'; }
      elseif (strpos($this->uadata['os'], 'OpenVMS') !== false) { $this->uadata['platform'] = 'OpenVMS'; }
      elseif (strpos($this->uadata['os'], 'Warp') !== false) { $this->uadata['platform'] = 'OS/2'; }
      elseif (strpos($this->uadata['os'], 'SymbianOS') !== false) { $this->uadata['platform'] = 'SymbianOS'; }
      elseif (strpos($this->uadata['os'], 'CYGWIN') !== false) { $this->uadata['platform'] = 'Windows'; }
      else { $this->uadata['platform'] = $this->uadata['os']; }

      $this->uadata['lang'] = str_replace('_', '-', $this->uadata['lang']);
    }
  return $this->uadata['os'];
  }

  public function getPlatform() {
    if (!isset($this->uadata['platform'])) {
      $this->uadata['platform'] = null;
      // getOS() should get the date for us
      $this->getOS();
    }
  return $this->uadata['platform'];
  }

  public function getLanguage() {
    if (!isset($this->uadata['lang'])) {
      $this->uadata['lang'] = null;
      // getOS() should get the date for us
      $this->getOS();
    }
  return $this->uadata['lang'];
  }

  public function getGeckoDate() {
    if (!isset($this->uadata['geckodate'])) {
      $this->uadata['geckodate'] = null;
      // getEngine() should get the date for us
      $this->getEngine();
    }
  return $this->uadata['geckodate'];
  }

  public function isBot() { return $this->bot; }

  public function isns() {
    trigger_error(__CLASS__.'::'.__FUNCTION__.' is a deprecated function', E_USER_NOTICE);
    return (strpos($this->brand, 'Netscape') !== false);
  }
  public function isns4() {
    trigger_error(__CLASS__.'::'.__FUNCTION__.' is a deprecated function', E_USER_NOTICE);
    return ((strpos($this->brand, 'Netscape') !== false) && (intval($this->version) == 4));
  }
  public function isie() {
    trigger_error(__CLASS__.'::'.__FUNCTION__.' is a deprecated function', E_USER_NOTICE);
    return $this->hasEngine('trident');
  }
  public function geckodate() {
    trigger_error(__CLASS__.'::'.__FUNCTION__.' is a deprecated function', E_USER_NOTICE);
    return (!is_null($this->getGeckoDate())?$this->getGeckoDate():0);
  }
  public function geckobased() {
    trigger_error(__CLASS__.'::'.__FUNCTION__.' is a deprecated function', E_USER_NOTICE);
    return $this->hasEngine('gecko');
  }
  public function khtmlbased() {
    trigger_error(__CLASS__.'::'.__FUNCTION__.' is a deprecated function', E_USER_NOTICE);
    return $this->hasEngine('khtml');
  }
}
?>
