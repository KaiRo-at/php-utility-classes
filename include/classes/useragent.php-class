<?php
class userAgent {
  // userAgent PHP class
  // get user agent and tell us what Browser is accessing
  //
  // function userAgent([$ua_string])
  //   CONSTRUCTOR; reads UA string (or takes the optional given UA string) and gets info from that into our variables.
  //
  // var $uastring
  //   the plain User Agent string
  // var $brand
  //   returns the User Agent brand name
  // var $version
  //   the User Agent version
  //
  // function getBrand()
  //   returns the User Agent Brand Name
  // function getVersion()
  //   returns the User Agent version
  //
  // function isns()
  //   returns true if User Agent seems to be Netscape brand, false if not
  // function isns4()
  //   returns true if User Agent seems to be Netscape Communicator 4.x, false if not
  // function isie()
  //   returns true if User Agent seems to be a version of Internet Exploder, false if not
  // function geckobased()
  //   returns true if User Agent seems to be a Gecko-based browser, false if not
  // function geckodate()
  //   returns the Gecko date when it's a Gecko-based browser, 0 if not
  // function khtmlbased()
  //   returns true if User Agent seems to be a KHTML-based browser, false if not

  // collection of some known User Agent Strings:
  // Mozilla/5.0 (compatible; Konqueror/3; Linux 2.4.18; X11; i686)
  // Mozilla/5.0 (X11; U; Linux i686; de-AT; rv:1.3b) Gecko/20030114
  // Mozilla/4.0 (compatible; MSIE 5.0; Windows 95; DigExt)
  // Mozilla/4.0 (compatible; MSIE 6.0; Windows 98; Win 9x 4.90)
  // Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)
  // Mozilla/4.75 [de] (Win98; U)
  // Opera/5.12 (Windows 2000; U)  [de]
  // Mozilla/5.0 (Windows; U; Win 9x 4.90; de-DE; m18) Gecko/20010131 Netscape6/6.01
  // Mozilla/5.0 (Windows; U; Windows NT 5.1; de-DE; rv:1.0.1) Gecko/20020823 Netscape/7.0
  // Mozilla/5.0 (Macintosh; U; PPC Mac OS X; en) AppleWebKit/51 (like Gecko) Safari/51
  // Lynx/2.8.4rel.1 libwww-FM/2.14 SSL-MM/1.4.1 OpenSSL/0.9.6g
  // Mozilla/5.0 (Macintosh; U; PPC Mac OS X; en-US; rv:1.0.1) Gecko/20021109 Chimera/0.6+
  // Mozilla/5.0 (Windows; U; Win 9x 4.90; en-US; rv:1.3a) Gecko/20021207 Phoenix/0.5
  // Mozilla/5.0 Galeon/1.2.7 (X11; Linux i686; U;) Gecko/20021204
  // Mozilla/4.0 (compatible; MSIE 5.0; Windows XP) Opera 6.05 [ja]
  // Mozilla/4.0 (compatible; MSIE 5.12; Mac_PowerPC) OmniWeb/4.1.1-v424.6
  // Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.4b) Gecko/20030516 Mozilla Firebird/0.6
  // Mozilla/5.0 (Windows; U; WinNT4.0; en-US; rv:1.5a) Gecko/20030728 Mozilla Firebird/0.6.1


  var $uastring;
  var $brand;
  var $version;

  function userAgent($ua_string = "") {
    // *** constructor ***
    if (strlen($ua_string)) {
      $this->uastring = $ua_string;
    }
    else {
      // read raw UA string
      $this->uastring = $_SERVER["HTTP_USER_AGENT"];
    }

    // get UA brand and version
    $this->brand = "Unknown"; $this->version = 0;
    if (ereg("([0-9a-zA-Z\.]+)/([0-9a-zA-Z\.+]+)", $this->uastring, $regs)) {
      $this->brand = $regs[1]; // this is a reasonable default :)
      $this->version = $regs[2]; // this is a reasonable default :)
    }
    if (ereg("Netscape6/([0-9a-zA-Z\.+]+)", $this->uastring, $regs)) {
      $this->brand = "Netscape";
      $this->version = $regs[1];
    }
    elseif (ereg("Netscape/([0-9a-zA-Z\.+]+)", $this->uastring, $regs)) {
      $this->brand = "Netscape";
      $this->version = $regs[1];
    }
    elseif (ereg("Chimera/([0-9a-zA-Z\.+]+)", $this->uastring, $regs)) {
      $this->brand = "Chimera";
      $this->version = $regs[1];
    }
    elseif (ereg("Phoenix/([0-9a-zA-Z\.+]+)", $this->uastring, $regs)) {
      $this->brand = "Phoenix";
      $this->version = $regs[1];
    }
    elseif (ereg("Mozilla Firebird/([0-9a-zA-Z\.+]+)", $this->uastring, $regs)) {
      $this->brand = "Mozilla Firebird";
      $this->version = $regs[1];
    }
    elseif (ereg("Galeon/([0-9a-zA-Z\.+]+)", $this->uastring, $regs)) {
      $this->brand = "Galeon";
      $this->version = $regs[1];
    }
    elseif (ereg("rv:([0-9a-zA-Z\.+]+)", $this->uastring, $regs) && strstr($this->uastring, "Mozilla/") && strstr($this->uastring, "Gecko/")) {
      $this->brand = "Mozilla";
      $this->version = $regs[1];
    }
    elseif (ereg("Opera[ /]([0-9a-zA-Z\.+]+)", $this->uastring, $regs)) {
      $this->brand = "Opera";
      $this->version = $regs[1];
    }
    elseif (ereg("OmniWeb/([0-9a-zA-Z\.+]+)", $this->uastring, $regs)) {
      $this->brand = "OmniWeb";
      $this->version = $regs[1];
    }
    elseif (ereg("Konqueror/([0-9a-zA-Z\.+]+)", $this->uastring, $regs)) {
      $this->brand = "Konqueror";
      $this->version = $regs[1];
    }
    elseif (ereg("Safari/([0-9a-zA-Z\.+]+)", $this->uastring, $regs)) {
      $this->brand = "Safari";
      $this->version = $regs[1];
    }
    elseif (ereg("AppleWebKit/([0-9a-zA-Z\.+]+)", $this->uastring, $regs)) {
      $this->brand = "AppleWebKit";
      $this->version = $regs[1];
    }
    elseif (ereg("MSIE ([0-9a-zA-Z\.+]+)", $this->uastring, $regs)) {
      $this->brand = "Microsoft Internet Explorer";
      $this->version = $regs[1];
    }
    elseif (ereg("Mozilla/([0-9a-zA-Z\.+]+)", $this->uastring, $regs) && !strstr($this->uastring, "compatible;") && !strstr($this->uastring, "Gecko/")) {
      $this->brand = "Netscape";
      $this->version = $regs[1];
      if (intval($this->version) == 4) { $this->brand .= " Communicator"; }
    }
  }

  function getBrand() { return $this->brand; }
  function getVersion() { return $this->version; }

  function isns() {
    // set it static so that we don't have to call it that often
    static $is_ns;
    if (!isset($is_ns)) {
      $is_ns = false;
      if (strstr($this->brand, "Netscape")) {
        $is_ns = true;
      }
    }
  return $is_ns;
  }

  function isns4() {
    // set it static so that we don't have to call it that often
    static $is_ns4;
    if (!isset($is_ns4)) {
      $is_ns4 = false;
      if (strstr($this->brand, "Netscape") && (intval($this->version) == 4)) {
        $is_ns4 = true;
      }
    }
  return $is_ns4;
  }

  function isie() {
    // set it static so that we don't have to call it that often
    static $is_ie;
    if (!isset($is_ie)) {
      $is_ie = false;
      if (strstr($this->brand, "Internet Explorer")) {
        $is_ie = true;
      }
    }
  return $is_ie;
  }

  function geckobased() {
    // set it static so that we don't have to call it that often
    static $is_gecko;
    if (!isset($is_gecko)) {
      $is_gecko = false;
      if (strstr($this->uastring, "Gecko/")) {
        $is_gecko = true;
      }
    }
  return $is_gecko;
  }

  function geckodate() {
    // set it static so that we don't have to call it that often
    static $gdate;
    if (!isset($gdate)) {
      $gdate = 0;
      if (ereg("Gecko/([0-9]+)", $this->uastring, $regs)) {
        $gdate = $regs[1];
      }
    }
  return $gdate;
  }

  function khtmlbased() {
    // set it static so that we don't have to call it that often
    static $is_khtml;
    if (!isset($is_khtml)) {
      $is_khtml = false;
      if (strstr($this->brand, "Konqueror") || strstr($this->brand, "Safari") || strstr($this->brand, "AppleWebKit")) {
        $is_khtml = true;
      }
    }
  return $is_khtml;
  }
}
?>
